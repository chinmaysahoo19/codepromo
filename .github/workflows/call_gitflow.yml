name: My First Callme Work flow.
on:
  workflow_call:
    inputs:
      gitflow_type:
        type: string
        required: true
      increment_type:
        type: string
        required: true
env:
  GIT_SSH_PK: ${{ secrets.GIT_SSH_PK }}
jobs:
  gitflow:
    runs-on: ubuntu-latest
    name: ${{ inputs.gitflow_type }}
    steps:
      - name: "Git Config"
        run: |
          mkdir -p ~/.ssh
          echo "$GIT_SSH_PK" | base64 -d >~/id_rsa &&
          ssh-keyscan github.com > ~/.ssh/known_hosts
          cp ~/id_rsa  ~/.ssh/ && chmod -R 700 ~/.ssh && chmod -R 400 ~/.ssh/*
          git config --global --add safe.directory "*"
          git config --global user.name "Github Action "
          git config --global user.email "githubaction@github.com"
      - name: Clone Repo
        run: |
          git clone  git@github.com:${GITHUB_REPOSITORY}.git .
      - name: Version Increment
        if: ${{ inputs.gitflow_type }} == 'version_increment'
        run: |
          BUMP_VERSION_MESSAGE='[Version Push]'
          git checkout main
          git reset --hard origin/main
          yarn version --${{ inputs.increment_type }} --no-git-tag-version --no-commit-hooks
          version=$(jq -r '.version' package.json)
          git add package.json
          git commit -m "$BUMP_VERSION_MESSAGE $version"
          git push origin main
      - name: Release Start
        if: ${{ inputs.gitflow_type }} == 'release_start'
        run: |
          if [[ $( git branch -a | grep release ) ]]; then
            echo "$(git branch -a | grep release | sed 's/remotes\/origin\///g' ) exist. Please choose release finish option"
            exit 1
          else
            GIT_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
            echo $GIT_TAG
            PACKAGE_VERSION=v$(jq -r '.version' package.json)
            echo $PACKAGE_VERSION
            if [[ "${GIT_TAG}" == "${PACKAGE_VERSION}" ]]; then
              echo -e "\e[31m  Version  ${PACKAGE_VERSION} Present. Please run with option version_increment first. '\e[39m"
              exit 1
            fi
          fi
          BUMP_VERSION_MESSAGE='[Version Push]'
          git checkout main
          version=$(jq -r '.version' package.json)
          git checkout -b release/${version}
          git push origin release/${version}
      - name: Release Finish
        if: ${{ inputs.gitflow_type }} == 'release_finish'
        run: |
          if [[ $( git branch -a | grep release ) ]]; then
             release_branch=$(git branch -a | grep release | sed 's/remotes\/origin\///g' )
             git checkout ${release_branch}
             git checkout -b prod
             git merge ${release_branch}
             version=$(jq -r '.version' package.json)
             git tag v$version
             git push origin v$version
             git push origin prod
             git  branch -D ${release_branch}
             git push origin -d  release_branch
          else
             echo "Release does not exist.  Please release start"
             exit 1
          fi